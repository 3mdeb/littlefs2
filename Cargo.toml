[package]
name = "littlefs2"
description = "Idiomatic Rust API for littlefs"
version = "0.1.0-alpha.1"
authors = ["Nicolas Stalder <n@stalder.io>", "Brandon Edens <brandonedens@gmail.com>"]
edition = "2018"
license = "Apache-2.0 OR MIT"
readme = "README.md"
categories = ["embedded", "filesystem", "no-std"]
repository = "https://github.com/nickray/littlefs2"

[dependencies]
# aligned = { version = "0.3.2", optional = true }
bitflags = "1.0.4"
# cstr_core = "0.1.2"
cty = "0.2.1"
generic-array = "0.13.2"
heapless = "0.5.4"
# heapless-bytes = { path = "../heapless-bytes", optional = true }

# Listed as regular dependency behind feature flag,
# since dev-dependencies cannot be optional, and we
# actually want to both keep our dependencies minimal
# and test the `no_std` situation mainly.
# Run UI tests with `cargo test --features ui-tests`.
trybuild = { version = "1.0", optional = true }
ufmt = "0.1.0"

[dependencies.littlefs2-sys]
version = "0.1.5"

[dev-dependencies]
ssmarshal = "1"
serde = { version = "1.0", default-features = false, features = ["derive"] }

[features]
default = ["dir-entry-path"]
# use experimental closure-based API
dir-entry-path = []
# enable assertions in backend C code
ll-assertions = ["littlefs2-sys/assertions"]
# enable trace in backend C code
ll-trace = ["littlefs2-sys/trace"]
# enable to run UI tests
ui-tests = ["trybuild"]

# TODO: LFS_NAME_MAX (and maybe other sizes) are baked into the
# compiled C library. For instance, the `lfs_info` struct has a
# member `char name[LFS_NAME_MAX+1]`.
# This means that if we change `traits::Storage::FILENAME_MAX_PLUS_ONE`,
# we need to pass this on!
